const axios = require('axios');
require('dotenv').config();

async function testDashboardEndpoint() {
  try {
    console.log('üß™ Testando endpoint /api/dashboard/stats...\n');
    
    // Teste sem autentica√ß√£o (deve retornar 401)
    try {
      const response = await axios.get('http://localhost:3000/api/dashboard/stats');
      console.log('‚ùå Erro: endpoint deveria requerer autentica√ß√£o');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Endpoint requer autentica√ß√£o corretamente (401)');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }
    
    // Teste com token inv√°lido
    try {
      const response = await axios.get('http://localhost:3000/api/dashboard/stats', {
        headers: { Authorization: 'Bearer token-invalido' }
      });
      console.log('‚ùå Erro: deveria rejeitar token inv√°lido');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Rejeita token inv√°lido corretamente (401)');
      } else {
        console.log('‚ùå Erro inesperado com token inv√°lido:', error.message);
      }
    }
    
    // Teste da estrutura de resposta do endpoint de sa√∫de
    const healthResponse = await axios.get('http://localhost:3000/health');
    console.log('‚úÖ Health check funcionando:', healthResponse.data.status);
    
    // Teste da estrutura de resposta sem auth
    try {
      const protectedResponse = await axios.get('http://localhost:3000/api/protected');
    } catch (error) {
      console.log('‚úÖ Endpoint protegido funcionando (requer auth)');
    }
    
    console.log('\nüìã Diagn√≥stico:');
    console.log('- Servidor: ‚úÖ Funcionando');
    console.log('- Endpoint dashboard: ‚úÖ Existe e requer autentica√ß√£o');
    console.log('- Problema prov√°vel: Token de autentica√ß√£o inv√°lido ou expirado no frontend');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testDashboardEndpoint();